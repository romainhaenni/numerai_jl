#!/usr/bin/env julia

using Pkg
Pkg.activate(@__DIR__)

push!(LOAD_PATH, joinpath(@__DIR__, "src"))

using NumeraiTournament
using ArgParse

function parse_commandline()
    s = ArgParseSettings(
        description = "Numerai Tournament Trading System",
        version = "1.0.0",
        add_version = true
    )

    @add_arg_table! s begin
        "--config", "-c"
            help = "Path to config file"
            default = "config.toml"
        "--headless", "-H"
            help = "Run in headless mode (no TUI)"
            action = :store_true
        "--train", "-t"
            help = "Train models immediately"
            action = :store_true
        "--submit", "-s"
            help = "Submit predictions for current round"
            action = :store_true
        "--download", "-d"
            help = "Download latest tournament data"
            action = :store_true
        "--performance", "-p"
            help = "Show model performances"
            action = :store_true
        "--model", "-m"
            help = "Specify model name for operations"
            default = ""
        "--verbose", "-v"
            help = "Enable verbose output"
            action = :store_true
    end

    return parse_args(s)
end

function main()
    args = parse_commandline()
    
    config_path = args["config"]
    config = NumeraiTournament.load_config(config_path)
    
    if args["verbose"]
        println("üöÄ Numerai Tournament System v1.0.0")
        println("üìä Configuration loaded from: $config_path")
        println("ü§ñ Models: $(join(config.models, ", "))")
        println("üíæ Data directory: $(config.data_dir)")
        println("üîß Using $(Threads.nthreads()) threads")
    end
    
    if args["download"]
        println("üì• Downloading tournament data...")
        api_client = NumeraiTournament.API.NumeraiClient(
            config.api_public_key,
            config.api_secret_key
        )
        
        mkpath(config.data_dir)
        
        NumeraiTournament.API.download_dataset(
            api_client, "train", 
            joinpath(config.data_dir, "train.parquet")
        )
        NumeraiTournament.API.download_dataset(
            api_client, "validation", 
            joinpath(config.data_dir, "validation.parquet")
        )
        NumeraiTournament.API.download_dataset(
            api_client, "live", 
            joinpath(config.data_dir, "live.parquet")
        )
        NumeraiTournament.API.download_dataset(
            api_client, "features", 
            joinpath(config.data_dir, "features.json")
        )
        
        println("‚úÖ Data downloaded successfully")
        return
    end
    
    if args["performance"]
        println("üìä Fetching model performances...")
        api_client = NumeraiTournament.API.NumeraiClient(
            config.api_public_key,
            config.api_secret_key
        )
        
        for model in config.models
            try
                perf = NumeraiTournament.API.get_model_performance(api_client, model)
                println("\nü§ñ Model: $model")
                println("  CORR:   $(round(perf.corr, digits=4))")
                println("  MMC:    $(round(perf.mmc, digits=4))")
                println("  FNC:    $(round(perf.fnc, digits=4))")
                println("  Sharpe: $(round(perf.sharpe, digits=4))")
                println("  Stake:  $(round(perf.stake, digits=2)) NMR")
            catch e
                println("‚ùå Failed to get performance for $model: $e")
            end
        end
        return
    end
    
    if args["train"]
        println("üß† Training models...")
        
        using .DataLoader, .Pipeline
        
        train_df = DataLoader.load_training_data(
            joinpath(config.data_dir, "train.parquet"),
            sample_pct=0.1
        )
        val_df = DataLoader.load_training_data(
            joinpath(config.data_dir, "validation.parquet")
        )
        
        feature_cols = filter(
            name -> startswith(name, "feature_"),
            names(train_df)
        )
        
        pipeline = Pipeline.MLPipeline(
            feature_cols=feature_cols,
            target_col="target_cyrus_v4_20",
            neutralize=true,
            neutralize_proportion=0.5
        )
        
        Pipeline.train!(pipeline, train_df, val_df, verbose=true)
        
        println("‚úÖ Training completed")
        return
    end
    
    if args["submit"]
        println("üì§ Submitting predictions...")
        
        model_name = args["model"] != "" ? args["model"] : config.models[1]
        
        api_client = NumeraiTournament.API.NumeraiClient(
            config.api_public_key,
            config.api_secret_key
        )
        
        round_info = NumeraiTournament.API.get_current_round(api_client)
        println("Round #$(round_info.number)")
        
        predictions_file = joinpath(
            config.data_dir,
            "predictions_$(model_name)_round$(round_info.number).csv"
        )
        
        if !isfile(predictions_file)
            println("‚ùå Predictions file not found: $predictions_file")
            println("   Please run with --train first to generate predictions")
            return
        end
        
        submission_id = NumeraiTournament.API.submit_predictions(
            api_client,
            model_name,
            predictions_file
        )
        
        println("‚úÖ Submitted successfully! ID: $submission_id")
        return
    end
    
    # Default: Run tournament system
    NumeraiTournament.run_tournament(
        config_path=config_path,
        headless=args["headless"]
    )
end

if abspath(PROGRAM_FILE) == @__FILE__
    main()
end