#!/usr/bin/env julia
# Numerai Tournament System - Main executable script
# This script provides the command-line interface for the tournament system

# Ensure we're using the correct project
import Pkg
Pkg.activate(@__DIR__)

# Import the main module
using NumeraiTournament

# Parse command-line arguments
function parse_args(args)
    options = Dict{String, Any}(
        "headless" => false,
        "download" => false,
        "train" => false,
        "submit" => false,
        "performance" => false,
        "help" => false,
        "model" => nothing,
        "config" => "config.toml"
    )
    
    i = 1
    while i <= length(args)
        arg = args[i]
        if arg == "--headless" || arg == "-H"
            options["headless"] = true
        elseif arg == "--download" || arg == "-d"
            options["download"] = true
        elseif arg == "--train" || arg == "-t"
            options["train"] = true
        elseif arg == "--submit" || arg == "-s"
            options["submit"] = true
        elseif arg == "--performance" || arg == "-p"
            options["performance"] = true
        elseif arg == "--help" || arg == "-h"
            options["help"] = true
        elseif arg == "--model" || arg == "-m"
            i += 1
            if i <= length(args)
                options["model"] = args[i]
            else
                println("Error: --model requires a model name")
                exit(1)
            end
        elseif arg == "--config" || arg == "-c"
            i += 1
            if i <= length(args)
                options["config"] = args[i]
            else
                println("Error: --config requires a config file path")
                exit(1)
            end
        else
            println("Unknown option: $arg")
            options["help"] = true
            break
        end
        i += 1
    end
    
    return options
end

# Display help message
function show_help()
    println("""
    Numerai Tournament System - Julia Implementation
    
    Usage: ./numerai [OPTIONS]
    
    Options:
      (no options)        Launch interactive TUI dashboard
      --headless, -H      Run in headless mode (for automation)
      --download, -d      Download latest tournament data
      --train, -t         Train models with current data
      --submit, -s        Submit predictions to Numerai
      --performance, -p   View model performance
      --model, -m NAME    Specify model name for operations
      --config, -c FILE   Use specific config file (default: config.toml)
      --help, -h          Show this help message
    
    TUI Dashboard Controls:
      q - Quit
      p - Pause/Resume training
      s - Start Training
      h - Show Help
      n - Create new model
    
    Environment Variables:
      NUMERAI_PUBLIC_ID    Your Numerai public ID
      NUMERAI_SECRET_KEY   Your Numerai secret key
    
    Examples:
      ./numerai                    # Launch interactive dashboard
      ./numerai --headless         # Run in background mode
      ./numerai --download         # Download latest data
      ./numerai --train            # Train all configured models
      ./numerai --submit           # Submit predictions
      ./numerai --model mymodel --train  # Train specific model
    """)
end

# Main entry point
function main()
    # Parse command-line arguments
    options = parse_args(ARGS)
    
    # Show help if requested
    if options["help"]
        show_help()
        return
    end
    
    # Load configuration (gracefully handles missing config files)
    config_file = options["config"]
    if !isfile(config_file)
        println("Warning: Configuration file '$config_file' not found")
        println("Using default configuration with environment variables")
        # The load_config function will handle the missing file gracefully
    end
    
    # Check for environment variables only if config file is missing
    if !isfile(config_file) && (!haskey(ENV, "NUMERAI_PUBLIC_ID") || !haskey(ENV, "NUMERAI_SECRET_KEY"))
        println("Error: No config file found and NUMERAI_PUBLIC_ID/NUMERAI_SECRET_KEY environment variables not set")
        println("Please either:")
        println("  1. Create a config.toml file, or")
        println("  2. Set NUMERAI_PUBLIC_ID and NUMERAI_SECRET_KEY environment variables")
        exit(1)
    end
    
    try
        # Handle specific operations
        if options["download"]
            println("Downloading tournament data...")
            NumeraiTournament.download_tournament_data(config_file)
        elseif options["train"]
            model_name = options["model"]
            if model_name !== nothing
                println("Training model: $model_name")
                NumeraiTournament.train_model(model_name, config_file)
            else
                println("Training all configured models...")
                NumeraiTournament.train_all_models(config_file)
            end
        elseif options["submit"]
            model_name = options["model"]
            if model_name !== nothing
                println("Submitting predictions for model: $model_name")
                NumeraiTournament.submit_predictions(model_name, config_file)
            else
                println("Submitting predictions for all models...")
                NumeraiTournament.submit_all_predictions(config_file)
            end
        elseif options["performance"]
            model_name = options["model"]
            if model_name !== nothing
                println("Fetching performance for model: $model_name")
                NumeraiTournament.show_model_performance(model_name, config_file)
            else
                println("Fetching performance for all models...")
                NumeraiTournament.show_all_performance(config_file)
            end
        else
            # Launch dashboard or headless mode
            headless = options["headless"]
            if headless
                println("Starting Numerai Tournament System in headless mode...")
            else
                println("Starting Numerai Tournament System dashboard...")
            end
            NumeraiTournament.run_tournament(headless=headless, config_path=config_file)
        end
    catch e
        println("\nError: $(e)")
        if isa(e, InterruptException)
            println("Operation cancelled by user")
        else
            println("Stack trace:")
            for (exc, bt) in Base.catch_stack()
                showerror(stdout, exc, bt)
                println()
            end
        end
        exit(1)
    end
end

# Run main function
if abspath(PROGRAM_FILE) == @__FILE__
    main()
end