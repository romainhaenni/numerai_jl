        - module Neutralization
        - 
        - using DataFrames
        - using LinearAlgebra
        - using Statistics
        - using StatsBase
        - 
        5 function get_feature_exposures(predictions::Vector{Float64}, features::Matrix{Float64})::Vector{Float64}
        5     if length(predictions) != size(features, 1)
        0         error("Predictions length must match features rows")
        -     end
        -     
        -     # Use least squares to solve for exposures
        5     exposures = features \ predictions
        -     
        5     return exposures
        - end
        - 
       12 function neutralize(predictions::Vector{Float64}, features::Matrix{Float64}; 
        -                     proportion::Float64=1.0)::Vector{Float64}
       10     if proportion < 0.0 || proportion > 1.0
        0         error("Proportion must be between 0 and 1")
        -     end
        -     
        5     if proportion == 0.0
        0         return predictions
        -     end
        -     
        5     exposures = get_feature_exposures(predictions, features)
        -     
        5     neutralized_component = features * exposures
        -     
        5     neutralized = predictions - proportion * neutralized_component
        -     
        5     return neutralized
        - end
        - 
        2 function smart_neutralize(predictions::Vector{Float64}, features::Matrix{Float64}, 
        -                          eras::Vector{Int}; proportion::Float64=0.5)::Vector{Float64}
        1     unique_eras = unique(eras)
        2     neutralized = similar(predictions)
        -     
        1     for era in unique_eras
        2         era_mask = eras .== era
        2         era_indices = findall(era_mask)
        -         
        2         if length(era_indices) > 0
        2             era_predictions = predictions[era_indices]
        2             era_features = features[era_indices, :]
        -             
        4             era_neutralized = neutralize(era_predictions, era_features, proportion=proportion)
        -             
        2             neutralized[era_indices] = era_neutralized
        -         end
        2     end
        -     
        1     return neutralized
        - end
        - 
        - function feature_neutral_correlation(predictions::Vector{Float64}, features::Matrix{Float64}, 
        -                                     target::Vector{Float64})::Float64
        -     neutralized = neutralize(predictions, features, proportion=1.0)
        -     
        -     return cor(neutralized, target)
        - end
        - 
        1 function orthogonalize(predictions::Vector{Float64}, reference::Vector{Float64})::Vector{Float64}
        1     dot_product = dot(predictions, reference)
        1     norm_squared = dot(reference, reference)
        -     
        1     if norm_squared == 0
        0         return predictions
        -     end
        -     
        1     projection = (dot_product / norm_squared) * reference
        -     
        1     return predictions - projection
        - end
        - 
        1 function l2_normalize(predictions::Vector{Float64})::Vector{Float64}
        2     norm = sqrt(sum(predictions .^ 2))
        -     
        1     if norm == 0
        0         return predictions
        -     end
        -     
        1     return predictions ./ norm
        - end
        - 
        - function get_feature_neutral_targets(targets::DataFrame, features::Matrix{Float64}, 
        -                                     eras::Vector{Int})::DataFrame
        -     neutralized_targets = DataFrame()
        -     
        -     for col in names(targets)
        -         target_values = Float64.(targets[!, col])
        -         neutralized_values = smart_neutralize(target_values, features, eras, proportion=1.0)
        -         neutralized_targets[!, col] = neutralized_values
        -     end
        -     
        -     return neutralized_targets
        - end
        - 
        - function compute_max_feature_exposure(predictions::Vector{Float64}, features::Matrix{Float64})::Float64
        -     exposures = abs.(get_feature_exposures(predictions, features))
        -     return maximum(exposures)
        - end
        - 
        - function iterative_neutralization(predictions::Vector{Float64}, features::Matrix{Float64}; 
        -                                  max_iterations::Int=10, tolerance::Float64=0.01)::Vector{Float64}
        -     current_predictions = copy(predictions)
        -     
        -     for i in 1:max_iterations
        -         max_exposure = compute_max_feature_exposure(current_predictions, features)
        -         
        -         if max_exposure < tolerance
        -             break
        -         end
        -         
        -         current_predictions = neutralize(current_predictions, features, proportion=0.1)
        -     end
        -     
        -     return current_predictions
        - end
        - 
        - export neutralize, smart_neutralize, feature_neutral_correlation, orthogonalize,
        -        l2_normalize, get_feature_neutral_targets, compute_max_feature_exposure,
        -        iterative_neutralization, get_feature_exposures
        - 
        - end
